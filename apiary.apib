FORMAT: 1A
HOST: https://citbconstructioncompanion.com:8443

# CITB CoCo
CITB Construction Companion API

**Note: all requests other than those specifically identified as** "Authorization header not required" **require an access token to be provided.**
**This token is retrieved by logging in using the /token endpoint.**
**It should then be passed in subsequent requests using the Authorization http header, for example the token *wxyz* would be provided as the header:**

```
Authorization: Bearer wxyz
```

**Note: some responses are shown split over multiple lines for readability but the actual responses from the API do not contain this additional whitespace**

# Group Token

## Bearer token-based authentication [/token]
### Retrieve an access token in order to log in [POST]
Authorization header not required
+ Request (application/x-www-form-urlencoded)

        grant_type=password&username=l.hogarth@example.com&password=password123&app_key=abcd

+ Response 200 (application/json)

        {
            "access_token":"wxyz",
            "token_type":"bearer",
            "expires_in":31535999,
            "user_name":"l.hogarth@example.com",
            "first_name":"Leon",
            "last_name":"Hogarth",
            "issued":"Tue, 11 Feb 2014 09:13:45 GMT",
            "expires":"Wed, 11 Feb 2015 09:13:45 GMT"
        }

+ Response 400 (application/json)

        {"error":"non_validated","error_description":"The user account has not been validated."}

        {"error":"invalid_grant","error_description":"The user name or password is incorrect."}

# Group Account
User account related resources

## Account registration [/api/account/register]
### Register a new user [POST]
Authorization header not required
+ Request (application/json)

        {
            "FirstName": "Leon",
            "LastName": "Hogarth",
            "UserName": "l.hogarth@example.com",
            "Password": "password123",
            "ConfirmPassword": "password123"
        }

+ Response 200

+ Response 400 (application/json)

        {"Message":"The request is invalid.","ModelState": {"":["Name l.hogarth@example.com is already taken.","Email 'l.hogarth@example.com' is already taken."]}}
        
        {"Message":"The request is invalid.","ModelState":{"model.UserName":["The UserName field is not a valid e-mail address."]}}

        {"Message":"The request is invalid.","ModelState":{"model.ConfirmPassword":["The password and confirmation password do not match."]}}
        
        {"Message":"The request is invalid.","ModelState":{"model.Password":["The Password must be at least 6 characters long."]}}

## “Forgot my password” request [/api/account/resetpassword?username={userName}]
This will cause an email to be sent to the specified user's email address with a link to a web page that will allow them to reset their password

+ Parameters
    + userName (string, `l.hogarth@example.com`) ... Email address of the user.

### Request reset password email [GET]
Authorization header not required
+ Response 200

+ Response 400

        {"Message":"The request is invalid.","ModelState":{"UserName":["The UserName field is not a valid e-mail address."]}}

+ Response 404

## Reset the password using the reset-token [/api/account/resetpassword]
Called by the web application when the user navigates to the url in the password reset email
### Reset password [POST]
Authorization header not required

+ Request (application/json)
 
        {
          "ResetToken": "abc",
          "NewPassword": "password124",
          "ConfirmPassword": "password124"
        }
 
+ Response 200

+ Response 400

        {"Message":"The request is invalid.","ModelState":{"model.ConfirmPassword":["The new password and confirmation password do not match."]}}

        {"Message":"The request is invalid.","ModelState":{"model.NewPassword":["The New password must be at least 6 characters long."]}}

+ Response 404

# Group Organisation
Organisation related resources

## Organisation creation [/api/organisation]
### Create an organisation [POST]
There is currently no validation on the values provided (other than ensuring required fields are present) so creating duplicate organisations/organisations with the same details is possible although this may change in future.

+ Request (application/json)

        {
            "Name": "ACME Builders PLC",
            "AddressLine1": "ACME Building",
            "AddressLine2": "123 High Street",
            "Town": "Townville",
            "County": "Countryshire",
            "Postcode": "AB12 9YZ",
            "Country": "Countryland",
            "ContactTel": "01234 567 890"
            "ContactMobile": "07123 456 789"
        }

+ Response 400

        {
            "Message":"The request is invalid.",
            "ModelState":{
                "model.Name":["The Organisation name field is required."]
            }
        }

+ Response 200

## Organisation logo [/api/organisation/{organisationId}/logo]
Set the organisation's logo

+ Parameters
    + organisationId (int, `123`) ... id returned on the creation of a new organisation.

### Set the logo [POST]
Response status 404 if the organisation is not found.  
The image is validated to ensure it is a valid image of the specified content type - if this is not the case then currently a 500 (internal server error) response is sent - this will be amended to be a more appropriate status code.  
Currently no validation of image size (bytes or height/width) is implemented - this may be added later.
+ Request (image/jpeg or image/gif or image/png)
 
        <body contains image binary content>
 
+ Response 200

+ Response 400

        {"Message":"Unsupported media content type"}
        
+ Response 404

+ Response 415

        {"Message":"The request entity's media type 'image/random' is not supported for this resource."}


## Get organisation list [/api/organisation/getall]
Retrieves a list of organisations. Currently this reflects all of the organisations created by the user, although this is liable to change in the near future.

###Get organisation listing [GET]

+ Response 200 (application/json)

        [
            {
                "Id": 1,
                "Name": "ACME Builders PLC",
                "AddressLine1": "ACME Building",
                "AddressLine2": "123 High Street",
                "Town": "Townville",
                "County": "Countryshire",
                "Postcode": "AB12 9YZ",
                "Country": "Countryland",
                "ContactTel": "01234 567 890",
                "ContactMobile": "07123 456 789"
            },
            {
                "Id": 2,
                "Name": "Cowboy Builders PLC",
                "AddressLine1": "321 Main Road",
                "AddressLine2": null,
                "Town": "Burywich",
                "County": null,
                "Postcode": "ZY98 1BA",
                "Country": null,
                "ContactTel": null,
                "ContactMobile": null
            },
            {
                "Id": 3,
                "Name": "ACME Builders PLC",
                "AddressLine1": "ACME Building",
                "AddressLine2": "123 High Street",
                "Town": "Townville",
                "County": "Countryshire",
                "Postcode": "AB12 9YZ",
                "Country": "Countryland",
                "ContactTel": "01234 567 890",
                "ContactMobile": "07123 456 789"
            }
        ]

## Get organisation [/api/organisation/{organisationId}]
Retrieve details for a single organisation

+ Parameters
    + organisationId (int, `123`) ... the organisation to be retrieved.

###Get an organisation [GET]

+ Response 200 (application/json)

        {
            "Id": 1,
            "Name": "ACME Builders PLC",
            "AddressLine1": "ACME Building",
            "AddressLine2": "123 High Street",
            "Town": "Townville",
            "County": "Countryshire",
            "Postcode": "AB12 9YZ",
            "Country": "Countryland",
            "ContactTel": "01234 567 890",
            "ContactMobile": "07123 456 789"
        }

