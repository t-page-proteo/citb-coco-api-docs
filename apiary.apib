FORMAT: 1A
HOST: https://citbconstructioncompanion.com:8443

# CITB Construction Companion
CITB Construction Companion API

Environments

+ Live: https://citbconstructioncompanion.com:8443

+ Test: https://citbconstructioncompanion.com:8445

+ Dev: https://citbconstructioncompanion.com:8447

**Note: all requests other than those specifically identified as** "Authorization header not required" **require an access token to be provided.**
**This token is retrieved by logging in using the /token endpoint.**
**It should then be passed in subsequent requests using the Authorization http header, for example the token *wxyz* would be provided as the header:**

```
Authorization: Bearer wxyz
```

**Note: some responses are shown split over multiple lines for readability but the actual responses from the API do not contain this additional whitespace**

# Group Token

## Bearer token-based authentication [/token]
### Retrieve an access token in order to log in [POST]
Authorization header not required
+ Request (application/x-www-form-urlencoded)

        grant_type=password&username=l.hogarth@example.com&password=password123&app_key=abcd

+ Response 200 (application/json)

        {
            "access_token":"wxyz",
            "token_type":"bearer",
            "expires_in":31535999,
            "user_name":"l.hogarth@example.com",
            "first_name":"Leon",
            "last_name":"Hogarth",
            "issued":"Tue, 11 Feb 2014 09:13:45 GMT",
            "expires":"Wed, 11 Feb 2015 09:13:45 GMT"
        }

+ Response 400 (application/json)

        {"error":"non_validated","error_description":"The user account has not been validated."}

        {"error":"invalid_grant","error_description":"The user name or password is incorrect."}
        
        {"error":"unsupported_grant_type"}

# Group Account
User account related resources

## Account registration [/api/account/register]

+ **FirstName (string)**
+ **LastName (string)**
+ **UserName (string)**
+ **Password (string, minimum 6 characters, maximum 100)**
+ **ConfirmPassword (string, minimum 6 characters, maximum 100)**

### Register a new user [POST]
Authorization header not required
+ Request (application/json)

        {
            "FirstName": "Leon",
            "LastName": "Hogarth",
            "UserName": "l.hogarth@example.com",
            "Password": "password123",
            "ConfirmPassword": "password123"
        }

+ Response 200

+ Response 400 (application/json)

        {"Message":"The request is invalid.","ModelState": {"":["Name l.hogarth@example.com is already taken.","Email 'l.hogarth@example.com' is already taken."]}}
        
        {"Message":"The request is invalid.","ModelState":{"model.UserName":["The UserName field is not a valid e-mail address."]}}

        {"Message":"The request is invalid.","ModelState":{"model.ConfirmPassword":["The password and confirmation password do not match."]}}
        
        {"Message":"The request is invalid.","ModelState":{"model.Password":["The Password must be at least 6 characters long."]}}

## Account validation [/api/account/validate]
Called by the web application when the user navigates to the url in the New Account Validation email
### Validate [POST]
Authorization header not required

+ Response 200

        {"UserName":"l.hogarth@example.com","UserConfirmationToken":"abc"}

+ Response 400

        {"Message":"The request is invalid.","ModelState":{"":["Invalid token."]}}
        
+ Response 404

## “Forgot my password” request [/api/account/resetpassword?username={userName}]
This will cause an email to be sent to the specified user's email address with a link to a web page that will allow them to reset their password

+ Parameters
    + userName (string, `l.hogarth@example.com`) ... Email address of the user.

### Request reset password email [GET]
Authorization header not required
+ Response 200

+ Response 400

        {"Message":"The request is invalid.","ModelState":{"UserName":["The UserName field is not a valid e-mail address."]}}

+ Response 404

## Reset the password using the reset-token [/api/account/resetpassword]
Called by the web application when the user navigates to the url in the password reset email

+ **ResetToken (string)**
+ **NewPassword (string, minimum 6 characters, maximum 100)**
+ **ConfirmPassword (string, minimum 6 characters, maximum 100)**

### Reset password [POST]
Authorization header not required

+ Request (application/json)
 
        {
          "ResetToken": "abc",
          "NewPassword": "password124",
          "ConfirmPassword": "password124"
        }
 
+ Response 200

+ Response 400

        {"Message":"The request is invalid.","ModelState":{"model.ConfirmPassword":["The new password and confirmation password do not match."]}}

        {"Message":"The request is invalid.","ModelState":{"model.NewPassword":["The New password must be at least 6 characters long."]}}

+ Response 404

## User Photo [/api/account/photo]
Set the User's photo

### User Photo [POST]
Response status 400 if the media type is not valid.

+ Request (image/jpeg or image/gif or image/png)
        
        <body contains iamge binary content>

+ Response 200

        {"PhotoUrl": "https://citbconstructioncompanion.com:8443/userimages/aeb09841-c921-49ea-a53c-02eae247ad3a.jpg"}
+ Response 400

        {"Message": "Unsupported media content type"}

##User Details get/update [/api/account/UserData]

+ FirstName (string)
+ LastName (string)
+ AddressLine1 (string, 100 characters)
+ AddressLine2 (string, 100 characters)
+ Town (string, 100 characters)
+ County (string, 100 characters)
+ Postcode (string, 10 characters)
+ Country (string, 100 characters)
+ ContactTel (string, 20 characters)
+ ContactMobile (string, 20 characters)
+ NationalInsuranceNumber (string)

### Get a user's details [GET]
Retreive user's details. Response 404 if the user does not exist.
+ Response 200 (appication/json)

        {
            "FirstName": "Robert",
            "LastName": "Builder",
            "AddressLine1": "Flat A",
            "AddressLine2": "321 Culdesac Drive",
            "Town": "Townville",
            "County": "Countyshire",
            "Postcode": "ZY98 1BA",
            "Country": "Countryland",
            "ContactTel": "01234 987 654",
            "ContactMobile": "07890 654 321",
            "NationalInsuranceNumber": "AB 11 22 33 Z"
        }

+ Response 404

### Update a User [PUT]
Set the user's details. Response 404 if the user does not exist. 

+ Request (application/json)
    
        {
            "FirstName": "Robert",
            "LastName": "Builder",
            "AddressLine1": "Flat A",
            "AddressLine2": "321 Culdesac Drive",
            "Town": "Townville",
            "County": "Countyshire",
            "Postcode": "ZY98 1BA",
            "Country": "Countryland",
            "ContactTel": "01234 987 654",
            "ContactMobile": "07890 654 321",
            "NationalInsuranceNumber": "AB 11 22 33 Z"
        }

+ Response 204

+ Response 404



# Group Organisation
Organisation related resources

## Organisation creation [/api/organisation]

+ **Name (string, 200 characters)**
+ **AddressLine1 (string, 100 characters)**
+ AddressLine2 (string, 100 characters)
+ **Town (string, 100 characters)**
+ County (string, 100 characters)
+ **Postcode (string, 10 characters)**
+ Country (string, 100 characters)
+ ContactTel (string, 20 characters)
+ ContactMobile (string, 20 characters)

### Create an organisation [POST]
There is currently no validation on the values provided (other than ensuring required fields are present) so creating duplicate organisations/organisations with the same details is possible although this may change in future.

+ Request (application/json)

        {
            "Name": "ACME Builders PLC",
            "AddressLine1": "ACME Building",
            "AddressLine2": "123 High Street",
            "Town": "Townville",
            "County": "Countryshire",
            "Postcode": "AB12 9YZ",
            "Country": "Countryland",
            "ContactTel": "01234 567 890",
            "ContactMobile": "07123 456 789"
        }

+ Response 400

        {
            "Message":"The request is invalid.",
            "ModelState":{
                "model.Name":["The Organisation name field is required."]
            }
        }

+ Response 200

        {
            "Id": 123,
            "Name": "ACME Builders PLC",
            "AddressLine1": "ACME Building",
            "AddressLine2": "123 High Street",
            "Town": "Townville",
            "County": "Countryshire",
            "Postcode": "AB12 9YZ",
            "Country": "Countryland",
            "ContactTel": "01234 567 890",
            "ContactMobile": "07123 456 789"
            "LogoUrl": "https://citbconstructioncompanion.com:8443/Images/default-company-logo.png",
            "CanEdit": true
        }

## Organisation logo [/api/organisation/{organisationId}/logo]
Set the organisation's logo

+ Parameters
    + organisationId (int, `123`) ... id returned on the creation of a new organisation.

### Set the logo [POST]
Response status 404 if the organisation is not found.  
The image is validated to ensure it is a valid image of the specified content type - if this is not the case then currently a 500 (internal server error) response is sent - this will be amended to be a more appropriate status code.  
Currently no validation of image size (bytes or height/width) is implemented - this may be added later.
+ Request (image/jpeg or image/gif or image/png)
 
        <body contains image binary content>
 
+ Response 200

        {"LogoUrl": "https://citbconstructioncompanion.com:8443/userimages/aeb09841-c921-49ea-a53c-02eae247ad3a.jpg"}
        
+ Response 400

        {"Message": "Unsupported media content type"}
        
+ Response 404

+ Response 415

        {"Message": "The request entity's media type 'image/random' is not supported for this resource."}


## Get organisation list [/api/organisation/getall]
Retrieves a list of organisations. Currently this reflects all of the organisations created by the user, although this is liable to change in the near future.

### Get organisation listing [GET]

+ Response 200 (application/json)

        [
            {
                "Id": 1,
                "Name": "ACME Builders PLC",
                "AddressLine1": "ACME Building",
                "AddressLine2": "123 High Street",
                "Town": "Townville",
                "County": "Countryshire",
                "Postcode": "AB12 9YZ",
                "Country": "Countryland",
                "ContactTel": "01234 567 890",
                "ContactMobile": "07123 456 789"
                "LogoUrl": "https://citbconstructioncompanion.com:8443/userimages/aeb09841-c921-49ea-a53c-02eae247ad3a.jpg",
                "CanEdit": true,
                "IsOwner": true
            },
            {
                "Id": 2,
                "Name": "Cowboy Builders PLC",
                "AddressLine1": "321 Main Road",
                "AddressLine2": null,
                "Town": "Burywich",
                "County": null,
                "Postcode": "ZY98 1BA",
                "Country": null,
                "ContactTel": null,
                "ContactMobile": null
                "LogoUrl": "https://citbconstructioncompanion.com:8443/userimages/aeb09841-c921-49ea-a53c-02ea45447ad3a.jpg",
                "CanEdit": false,
                "IsOwner": false
            },
            {
                "Id": 3,
                "Name": "ACME Builders PLC",
                "AddressLine1": "ACME Building",
                "AddressLine2": "123 High Street",
                "Town": "Townville",
                "County": "Countryshire",
                "Postcode": "AB12 9YZ",
                "Country": "Countryland",
                "ContactTel": "01234 567 890",
                "ContactMobile": "07123 456 789"
                "LogoUrl": "https://citbconstructioncompanion.com:8443/userimages/aeb09841-c921-49ea-a53c-02ea786647ad3a.jpg",
                "CanEdit": false,
                "IsOwner": false
            }
        ]

## Organisation get/update [/api/organisation/{organisationId}]
Commands related to a single existing organisation. For updates, required fields/lengths match those defined for the create organisation method (see above).

+ Parameters
    + organisationId (int, `123`) ... the organisation to be retrieved or updated.

### Get an organisation [GET]
Retrieve an organisation's details. Response 401 if the requesting user doesn't have a relationship with the organisation.

+ Response 200 (application/json)

        {
            "Id": 1,
            "Name": "ACME Builders PLC",
            "AddressLine1": "ACME Building",
            "AddressLine2": "123 High Street",
            "Town": "Townville",
            "County": "Countryshire",
            "Postcode": "AB12 9YZ",
            "Country": "Countryland",
            "ContactTel": "01234 567 890",
            "ContactMobile": "07123 456 789",
            "LogoUrl": "https://citbconstructioncompanion.com:8443/userimages/ae9841-c921-49ea-a53c-02eae247ad3a.jpg",
            "CanEdit": true,
            "IsOwner": true
        }

+ Response 401

### Update an organisation [PUT]

+ Request (application/json)

        {
            "Id": 1,
            "Name": "ACME Builders PLC",
            "AddressLine1": "ACME Building",
            "AddressLine2": "123 High Street",
            "Town": "Townville",
            "County": "Countryshire",
            "Postcode": "AB12 9YZ",
            "Country": "Countryland",
            "ContactTel": "01234 567 890",
            "ContactMobile": "07123 456 789"
        }

+ Response 204

+ Response 400

        {"Message":"The request is invalid.","ModelState":{"bindingModel.Name":["The Organisation name field is required."]}}

+ Response 401

+ Response 404

### Delete an Organisation [DELETE]
Flags an organisation as having been deactivated. Once deactivated it will not be returned by api calls.

Response status 404 if the organisation is not found.

Response status 401 if the user does not have access to delete the organisation.

+ Response 204

+ Response 404

+ Response 401

# Group Employee
Employee related resources and actions. Note that strictly speaking these actions are a subset of organisation.

## Get employee list [/api/organisation/{organisationId}/employees]
Retrieves a list of employees who work with the organisation. Response 401 if the requesting user doesn't have a relationship with the organisation.

+ Parameters
    + organisationId (int, `123`) ... the organisation to which the request relates
    
### Get employee listing [GET]

+ Response 200 (application/json)

        [
            {
                "Id": 1,
                "OrganisationId": 123,
                "Email": "robert.t.builder@example.com",
                "FirstName": "Robert",
                "LastName": "Builder",
                "AddressLine1": "Flat A",
                "AddressLine2": "123 Culdesac Drive",
                "Town": "Townville",
                "County": "Countyshire",
                "Postcode": "ZY98 1BA",
                "Country": "Countryland",
                "ContactTel": "01234 567 890",
                "ContactMobile": "07123 456 789",
                "PhotoUrl": "https://citbconstructioncompanion.com:8443/userimages/aeb09841-c921-49ea-a53c-02eae247ad3a.jpg",
                "NationalInsuranceNumber": "AB112233Z",
                "IsOwner": true,
                "IsRegisteredUser": true,
                "CanEdit": true
            },
            {
                "Id": 2,
                "OrganisationId": 123,
                "Email": "the.wraight.stuff@example.com",
                "FirstName": "Simon",
                "LastName": "Wraight",
                "AddressLine1": "Flat B",
                "AddressLine2": "124 Culdesac Drive",
                "Town": "Townville",
                "County": "Countyshire",
                "Postcode": "ZY98 2BA",
                "Country": "Countryland",
                "ContactTel": "01234 567 891",
                "ContactMobile": "07123 456 788",
                "PhotoUrl": "https://citbconstructioncompanion.com:8443/userimages/aeb09841-c921-49ea-a53c-02eae247ad3a.jpg",
                "NationalInsuranceNumber": "AB112233Z",
                "IsOwner": false,
                "IsRegisteredUser": true,
                "CanEdit": true
            },
            {
                "Id": 3,
                "OrganisationId": 123,
                "Email": "bennie.bentley@example.com",
                "FirstName": "Bernard",
                "LastName": "Bentley",
                "AddressLine1": "Flat C",
                "AddressLine2": "125 Culdesac Drive",
                "Town": "Townville",
                "County": "Countyshire",
                "Postcode": "ZY98 3BA",
                "Country": "Countryland",
                "ContactTel": "01234 567 892",
                "ContactMobile": "07123 456 787",
                "PhotoUrl": "https://citbconstructioncompanion.com:8443/userimages/aeb09841-c921-49ea-a53c-02eae247ad3a.jpg",
                "NationalInsuranceNumber": "AB112233Z",
                "IsOwner": false,
                "IsRegisteredUser": false,
                "CanEdit": true
            }
        ]
        
+ Response 401

## Create a new employee [/api/organisation/{organisationId}/employee]
Individual employee related methods

+ **FirstName (string)**
+ **LastName (string)**
+ Email (string)
+ AddressLine1 (string, 100 characters)
+ AddressLine2 (string, 100 characters)
+ Town (string, 100 characters)
+ County (string, 100 characters)
+ Postcode (string, 10 characters)
+ Country (string, 100 characters)
+ ContactTel (string, 20 characters)
+ ContactMobile (string, 20 characters)
+ NationalInsuranceNumber (string)

+ Parameters
    + organisationId (int, `123`) ... the organisation to which the employee will belong

### Create an employee [POST]
There is currently no validation on the values provided (other than ensuring required fields are present) so creating duplicate employees with the same details is possible although this may change in future.
Response status 404 if the organisation is not found, or 401 if the requesting user cannot modify the organisation 

+ Request (application/json)

        {
            "FirstName": "Robert",
            "LastName": "Builder",
            "Email": "robert.t.builder@example.com",
            "AddressLine1": "Flat A",
            "AddressLine2": "123 Culdesac Drive",
            "Town": "Townville",
            "County": "Countyshire",
            "Postcode": "ZY98 1BA",
            "Country": "Countryland",
            "ContactTel": "01234 567 890",
            "ContactMobile": "07123 456 789",
            "NationalInsuranceNumber": "AB112233Z"
        }

+ Response 400

        {
            "Message":"The request is invalid.",
            "ModelState":{
                "model.Name":["The First name field is required."]
            }
        }

+ Response 401

+ Response 404

+ Response 200

        {
            "Id": 456,
            "OrganisationId": 123,
            "Email": "robert.t.builder@example.com",
            "FirstName": "Robert",
            "LastName": "Builder",
            "AddressLine1": "Flat A",
            "AddressLine2": "123 Culdesac Drive",
            "Town": "Townville",
            "County": "Countyshire",
            "Postcode": "ZY98 1BA",
            "Country": "Countryland",
            "ContactTel": "01234 567 890",
            "ContactMobile": "07123 456 789",
            "NationalInsuranceNumber": "AB112233Z",
            "IsOwner": false,
            "IsRegisteredUser": false
        }

## Update or retrieve an existing employee [/api/organisation/{organisationId}/employee/{employeeId}]
Methods to update or retrieve an existing employee. For updates, required fields/lengths match those defined for the create employee method (see above).

+ Parameters
    + organisationId (int, `123`) ... the organisation to which the employee belongs
    + employeeId (int, `123`) ... the employee to which the request relates

### Get an employee [GET]
Retrieve an employee record. Throws a 404 if the organisation and/or employee not found. Response 401 if the requesting user doesn't have access to modify/edit the organisation (ie. the owner) or the user is not the employee him/herself.

+ Response 200 (application/json)

        {
            "Id": 456,
            "OrganisationId": 123,
            "Email": "l.hogarth@example.com",
            "FirstName": "Leon",
            "LastName": "Hogarth",
            "AddressLine1": "Flat A",
            "AddressLine2": "123 Culdesac Drive",
            "Town": "Townville",
            "County": "Countyshire",
            "Postcode": "ZY98 1BA",
            "Country": "Countryland",
            "ContactTel": "01234 567 890",
            "ContactMobile": "07123 456 789",
            "NationalInsuranceNumber": "AB112233Z",
            "IsOwner": false,
            "IsRegisteredUser": false
        }

+ Response 401

+ Response 404

### Update an employee [PUT]
Update an employee record. Throws a 404 if the organisation and/or employee not found. Response 401 if requesting user doesn't have write access to the organisation (ie. non-owner)

+ Request (application/json)

        {
            "FirstName": "Bobbie",
            "LastName": "Builder",
            "Email": "robert.t.builder@example.com",
            "AddressLine1": "Flat A",
            "AddressLine2": "123 Culdesac Drive",
            "Town": "Townville",
            "County": "Countyshire",
            "Postcode": "ZY98 1BA",
            "Country": "Countryland",
            "ContactTel": "01234 567 890",
            "ContactMobile": "07123 456 789",
            "NationalInsuranceNumber": "ZY998877A"
        }

+ Response 204

+ Response 401

+ Response 404

## Invite an existing employee [/api/organisation/{organisationId}/employee/{employeeId}/invite]
Use this to invite a "stub" employee to join CITB and associate themselves with the organisation

+ Parameters
    + organisationId (int, `123`) ... the organisation to which the employee belongs
    + employeeId (int, `123`) ... the employee to which the request relates

### Invite an employee [POST]
Send an e-mail to the employee to work with the organisation. Response status 404 if the organisation/employee not found, 403 if the employee is already a full (registered) user and 400 if the employee record doesn't have an e-mail address value.

+ Response 200

+ Response 400

        {"Message": "No email address found."}

+ Response 403

+ Response 404

## Set an employee photo [/api/organisation/{organisationId/employee/{employeeId}/photo]
Use this to upload a photo for a "stub" employee.

+ Parameters
    + organisationId (int, `123`) ... the organisation to which the employee belongs
    + employeeId (int, `123`) ... the employee to which the request relates

### Employee Photo [POST]
Response status 404 if the organisation or employee can not be found.
Response status 403 if the employee has been registered.
Response status 401 if the user does not have access to update the employee.
Response status 400 if the media type is not valid.

+ Request (image/jpeg or image/gif or image/png)
        
        <body contains iamge binary content>

+ Response 200

        {"PhotoUrl": "https://citbconstructioncompanion.com:8443/userimages/aeb09841-c921-49ea-a53c-02eae247ad3a.jpg"}
        
+ Response 400

        {"Message": "Unsupported media content type"}
        
+ Response 404
 
+ Response 403
 
+ Response 401
 

# Group Document
Document related resources and actions.

## Document Types [/api/document/documenttypes]
Document type related methods

### Get document type list [GET]
Retrieves the list of available document types

+ Response 200

        [
            {
                "Id": 1,
                "Name": "Risk assessment"
            },
            {
                "Id": 2,
                "Name": "Policy"
            },
            {
                "Id": 3,
                "Name": "Method statement"
            },
        ]

## Document [/api/document/{id}]
Single document related methods

+ **DocumentType (int)**
+ Description (string)
+ OriginalFilename (string)

+ Parameters
    + id (int, `123`) ... Document Id
    
### Set document details [PUT]
Response status 401 if the user doesn't have access to the document. Response status 404 if the document is not found.

+ Request (application/json)

        {
            "DocumentType": 1,
            "Description": "My risk assessment",
            "OriginalFilename": "My Risk Assessment.docx"
        }

+ Response 204
        

### Delete a document [DELETE]
Flags a document as having been deactivated. Once deactivated it will not be returned by api calls.

Response status 404 if the document is not found.

Response status 401 if the user does not have access to delete the document.

+ Response 204

+ Response 404

+ Response 401

## Document [/api/document/{id}/content]
Download a document

+ Parameters
    + id (int, `123`) ... Document Id
    
### Download [GET]
Response status 401 if the user doesn't have access to the document. Response status 404 if the document is not found.

+ Response 200

        "<body contains image binary content>"
        
## Organisation Document [/api/document/organisation/{id}]
Documents belonging to an organisation

+ Parameters
    + id (int, `123`) ... Organisation Id

### Get document list [GET]
Retrieves a list of documents for the given organisation.
Please note that the "Url" value returned is a secure Url and therefore the document can only be downloaded via this url if requested with an "Authorization: Bearer -token-" header.

+ Response 200 (application/json)

        [
            {
                "OrganisationId": 123,
                "Id": 1,
                "DocumentType": 1,
                "DocumentTypeName": "Risk assessment",
                "Url": "https://citbconstructioncompanion.com:8443/api/document/1/content",
                "Description": "My risk assessment",
                "OriginalFilename": "My Risk Assessment.docx",
                "CreateDateTime": "2014-03-07T12:04:17.403",
                "IsDeactivated", false,
                "CanEdit": true
            },
            {
                "OrganisationId": 123,
                "Id": 2,
                "DocumentType": 2,
                "DocumentTypeName": "Policy",
                "Url": "https://citbconstructioncompanion.com:8443/api/document/2/content",
                "Description": "My safety policy",
                "OriginalFilename": "My Safety Policy.pdf",
                "CreateDateTime": "2014-03-07T12:04:17.403"
                "IsDeactivated", false,
                "CanEdit": true
            }
        ]

### Upload a document [POST]
Please note that the "Url" value returned is a secure Url and therefore the document can only be downloaded via this url if requested with an "Authorization: Bearer -token-" header.

Response status 415 if the file extension is not an allowed type; the file extension is checked against list of allowed extensions - currently restricted to *.pdf, *.doc and *.docx

Response status 401 if the user doesn't have access to the organisation. Response status 404 if the organisation is not found.

+ Request (application/pdf or application/msword or application/vnd.openxmlformats-officedocument.wordprocessingml.document)
 
        <body contains document binary content>

+ Response 200

        {
            "Id": 123,
            "OrganisationId": 123,
            "Url": "https://citbconstructioncompanion.com:8443/api/document/123/content",
            "CreateDateTime": "2014-03-07T12:04:17.403"
        }
        
+ Response 401

+ Response 404

+ Response 415
